<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.neptrueworks.ordermanagement.data.mapping.ProductEntityMappable">

    <select id="fetchScalar" parameterType="int" resultType="ProductEntity">
        SELECT `id`,
               `name`,
               `price`,
               `stock`,
               `created_at`,
               `created_by`,
               `last_modified_at`,
               `last_modified_by`,
               `is_deleted`
        FROM `product`
        WHERE `id` = #{id};
    </select>

    <select id="fetchAll" resultType="ProductEntity">
        SELECT `id`,
               `name`,
               `price`,
               `stock`,
               `created_at`,
               `created_by`,
               `last_modified_at`,
               `last_modified_by`,
               `is_deleted`
        FROM `product`
    </select>

    <select id="fetch" parameterType="map" resultType="ProductEntity">
        SELECT `id`,
               `name`,
               `price`,
               `stock`,
               `created_at`,
               `created_by`,
               `last_modified_at`,
               `last_modified_by`,
               `is_deleted`
        FROM `product`
        WHERE `id` = #{id};
    </select>

    <select id="take" resultType="ProductEntity">
        SELECT `id`,
               `name`,
               `price`,
               `stock`,
               `created_at`,
               `created_by`,
               `last_modified_at`,
               `last_modified_by`,
               `is_deleted`
        FROM `product`
        LIMIT #{count} OFFSET #{offset};
    </select>

    <select id="countScalar" resultType="long">
        SELECT COUNT(1)
        FROM `product`
        WHERE `id` = #{id};
    </select>

    <select id="countAll" resultType="long">
        SELECT COUNT(1)
        FROM `product`;
    </select>

    <select id="sortProducts" resultType="ProductEntity">
        SELECT `id`,
               `name`,
               `price`,
               `stock`,
               `created_at`,
               `created_by`,
               `last_modified_at`,
               `last_modified_by`,
               `is_deleted`
        FROM `product`
        ORDER BY #{level.sortBy}
        <if test="level.orientation == DataSortOrientation.ASCENDING"> ASC</if>
        <if test="level.orientation == DataSortOrientation.DESCENDING"> DESC</if>
    </select>

    <select id="lookupProductsByName" resultType="ProductEntity">
        SELECT `id`,
        `name`,
        `price`,
        `stock`,
        `created_at`,
        `created_by`,
        `last_modified_at`,
        `last_modified_by`,
        `is_deleted`
        FROM `product`
        <where>
            `name` LIKE #{name} AND #{keyset.key}
            <if test="keyset.orientation == DataSeekOrientation.FORWARD"> &lt; </if>
            <if test="keyset.orientation == DataSeekOrientation.BACKWARD"> &gt; </if>
            #{keyset.value}
        </where>
        ORDER BY #{level.sortBy}
        <if test="level.orientation == DataSortOrientation.ASCENDING"> ASC;</if>
        <if test="level.orientation == DataSortOrientation.DESCENDING"> DESC;</if>
    </select>

    <insert id="add" parameterType="ProductEntity" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `product`
        (`name`,
         `price`,
         `stock`,
         `created_by`,
         `last_modified_by`)
        VALUES (#{name},
                #{price},
                #{stock},
                #{createdBy},
                #{createdBy});
    </insert>

    <delete id="deleteScalar" parameterType="int">
        DELETE
        FROM `product`
        WHERE `id` = #{id};
    </delete>

    <update id="removeScalar" parameterType="int">
        UPDATE `product`
        SET `is_deleted` = 1,
            last_modified_by = #{lastModifiedBy}
        WHERE `id` = #{id};
    </update>

    <update id="resumeScalar" parameterType="int">
        UPDATE `product`
        SET `is_deleted` = 0,
            `last_modified_by` = #{lastModifiedBy}
        WHERE `id` = #{id};
    </update>

    <update id="updateStock" parameterType="ProductEntity">
        UPDATE `product`
        SET `stock` = #{stock},
            last_modified_by = #{lastModifiedBy}
        WHERE `id` = #{id};
    </update>
</mapper>